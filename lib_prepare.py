{"metadata":{"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\ndef windowTransformWithAllDays(inp_df,window):\n    '''\n    Оконное преобразование \n    \n    Дополнительно в процессе оконного преобразования переходит к полному числу календарных дней.\n    Пустоты заполняется NaN.\n    Затем стандартное оконное преобразование.\n    Затем возврат к рабочим дням поданым на входе.\n    \n    Параметры:\n    inp_df - DataFrame подлежащий оконному преобразованию\n    window - размер окна преобразования\n    \n    Возращает:\n    DataFrame с числом столбцов большем в число раз равному размеру окна\n    '''\n    inp = inp_df.values\n    ind = inp_df.index.values\n\n    ext_ind = pd.to_datetime(pd.date_range(ind[0],ind[-1])).values\n    df = pd.DataFrame(index=ext_ind,columns=inp_df.columns)\n    df.loc[ind,:] = inp\n\n    res_df = pd.DataFrame(index=ext_ind)\n    columns = []\n    for w in range(window):\n        res_df = pd.concat([res_df,df.shift(w)],axis=1)\n        columns += [str(col) + '_' + str(w) for col in df.columns]\n    res_df.columns = columns\n    return res_df.loc[ind,:]\n\n# windowTransformWithAllDays(d_data,2)\n\n\n\nclass PrepData:\n    X = None # массив входов уже в окне трехмерный (id,window,feature_inp)\n    Y = None # массив выходов для соответствующего входа двумерная (id,feature_out)\n    \n    window = None\n    train_len = None\n    val_len = None\n    test_part = None\n    \n    all_len = None\n    learn_len = None\n    test_len = None\n    \n    def __init__(self,X,Y,window,train_len,val_len,test_part=0.3,**others):\n        \"\"\"создание класса источника данных для модели прогнозирования\"\"\"\n        \n        assert window > 1\n        assert train_len > 10\n        assert val_len > 1\n        assert X.shape[0] == Y.shape[0]\n        \n        # выход сразу сдвигаем назад (для прогноза)\n        self.Y = pd.DataFrame(Y,copy=True).shift(-1).values\n        \n        # вход гусеницей раскладываем по окну\n        self.X = np.ones((X.shape[0],window,X.shape[1]))\n        d = pd.DataFrame(X,copy=True)\n        for n in range(window):\n            self.X[:,n,:] = d.shift(n).values\n        \n        self.test_part, self.window, self.train_len, self.val_len  = test_part,window,train_len,val_len\n        \n        self.all_len = X.shape[0]\n        self.test_len = int(self.all_len * test_part)\n        self.learn_len = self.all_len - self.test_len - 1 # на одну (последнюю после теста calc-строку) меньше\n        \n        assert self.train_len + self.window + self.val_len < self.learn_len\n    \n    def get_rand_learn_vib(self):\n        \"\"\"извлечение случайной выборки для обучения модели\"\"\"\n        top = self.learn_len - self.val_len\n        bot = self.window + self.train_len\n        rnd = np.random.randint(bot,top)\n        \n        X_train = self.X[rnd-self.train_len:rnd,...]\n        Y_train = self.Y[rnd-self.train_len:rnd,...]\n        \n        X_val = self.X[rnd:rnd+self.val_len,...]\n        Y_val = self.Y[rnd:rnd+self.val_len,...]\n        \n        return X_train, Y_train, X_val, Y_val\n    \n    def get_last_learn_vib(self):\n        \"\"\"последняя выборка для генерации прогноза на завтра\"\"\"\n        X_train = self.X[-self.train_len-1:-1,...]\n        Y_train = self.Y[-self.train_len-1:-1,...]\n        \n        X_calc = self.X[-1,...].reshape(1,self.window,-1)\n        \n        return X_train, Y_train, X_calc\n    \n    def progon(self):\n        \"\"\"Генератор для прогона модели по всей выборке\"\"\"\n        for n in range(0,self.all_len-1-self.val_len,self.val_len):\n            X_train = None\n            Y_train = None\n            \n            if n > self.train_len + self.window:\n                X_train = self.X[n-self.train_len:n,...]\n                Y_train = self.Y[n-self.train_len:n,...] \n            \n            X_val = self.X[n:n+self.val_len,...]\n            Y_val = self.Y[n:n+self.val_len,...]\n            \n            yield X_train, Y_train, X_val, Y_val\n\n# data = PrepData(\n#     X = dClose.values,\n#     Y = dClose.values,\n#     window = 5,\n#     train_len = 500,\n#     val_len = 10,\n#     test_part = 0.25\n# )\n\ndef data_to_window(data,window):\n    wData = np.ones((data.shape[0],window,data.shape[1]))\n    d = pd.DataFrame(data)\n    for n in range(window):\n        wData[:,n,:] = d.shift(n).values\n    return wData\n\n# print('test - data_to_window')\n# data = np.random.rand(10,2)\n# res = data_to_window(data,3)\n# res.shape\n\ndef date_to_input(dateIndex):\n    days = dateIndex.day.values\n    weekdays = dateIndex.weekday.values\n    months = dateIndex.month.values\n    x2sc = lambda x,per: np.transpose([np.sin(x/per*2*np.pi),np.cos(x/per*2*np.pi)])\n    inputData = np.hstack([x2sc(days,31),x2sc(weekdays,7),x2sc(months,12)])\n    return inputData\n\n# print('test - date_to_input')\n# date_to_input(pd.date_range('2021-09-14',periods=5))\n\ndef split_learn_calc(*inps,gorizont=1):\n    res = []\n    \n    for inp in inps:\n        inp1 = inp.copy()\n        inp1[gorizont:,...] = inp1[:-gorizont,...]\n        inp1[0,...] = np.nan\n        res.append(inp1)\n        \n    for inp in inps:\n        res.append(np.array([inp[-1,...]]))\n        \n    return res\n\n# print('test - split_learn_calc')\n# split_learn_calc(np.random.rand(10,2),np.random.rand(10,1)+10)\n\ndef chistim_pustoty(*inps):\n    \n    index = []\n    for inp in inps:\n        axis = tuple(range(1,len(inp.shape)))\n        index.append(np.all(~np.isnan(inp),axis=axis))\n    index = np.all(np.array(index),axis=0)\n    return tuple([inp[index,...] for inp in inps])\n\n# print('test - chistim_pustoty')\n# data1 = np.random.rand(10,3,2)\n# data1[6,0,1] = np.nan\n# data2 = np.random.rand(10,1)\n# data2[1,0] = np.nan\n# data3 = pd.date_range('2021-09-14',periods=10)\n# [v.shape for v in chistim_pustoty(data1,data2,data2,data3.values[:,np.newaxis])]\n\ndef learn_val_random_vib(*inps,learnVibLen,valVibLen):\n    startLearn = np.random.randint(inps[0].shape[0] - learnVibLen - valVibLen)\n    startVal = startLearn + learnVibLen\n    \n    res = []\n    \n    for inp in inps:\n        res.append(inp[startLearn:(startLearn+learnVibLen),...])\n        res.append(inp[startVal:(startVal+valVibLen),...])\n    \n    return tuple(res)\n\n\ndef df_cols_to_num(df,*col_names):\n    \"\"\" преобразование строки в число\n    \"\"\"\n    for fld in col_names:\n        try:\n            df[fld] = pd.to_numeric(df[fld].str.replace(',','.'),errors='coerce')\n        except:\n            pass\n    return\n\ndef df_cols_to_date(df,*col_names):\n    \"\"\" преобразование строки в дату\n    \"\"\"\n    for fld in col_names:\n        try:\n            df[fld] = pd.to_datetime(df[fld],errors='coerce')\n        except:\n            pass\n    return\n\ndef df_cols_as_object(df,*col_names):\n    \"\"\" пеервод в категориальный вид\n    \"\"\"\n    for fld in col_names:\n        try:\n            df[fld] = df[fld].astype('object')\n        except:\n            pass\n    return\n\n\ndef df_col_report(df):\n    \"\"\"Отчет по столбцам\n    \"\"\"\n    resRep = []\n    for colName in df.columns:\n        col = df[colName]\n        resRep.append([colName,col.dtype,len(col.unique()),col.unique()[:8]])\n    return pd.DataFrame(resRep,columns=['Поле','тип','число уникальных','пример'])\n\ndef df_hist_report(df):\n    import matplotlib.pyplot as plt\n    k = 1\n    names = []\n    clmns = 3\n    rows = int(1+len(df.columns)/clmns)\n    plt.figure(figsize=(22,5*rows))\n    for colName in df.columns:\n        col = df[colName]\n        vls = col.unique()\n        x = [str(v) for v in col.value_counts().index]\n        h = list(col.value_counts().values)\n\n        if len(x) > 1:\n            plt.subplot(rows,clmns,k)\n            k += 1\n            if len(x) > 3:\n                names.append(colName)\n\n            if col.dtype.name == 'object':\n                col.value_counts()[:15].plot.barh()\n                # plt.xticks(rotation=30)\n\n            else:\n\n                pd.to_numeric(col,errors='coerce').hist(bins=min(100,len(x)))\n            plt.title(f'<{colName}> - uniq: {len(vls)}')\n    plt.tight_layout()\n    plt.show()\n    return\n","metadata":{"collapsed":false,"_kg_hide-input":false,"jupyter":{"outputs_hidden":false}},"execution_count":null,"outputs":[]}]}